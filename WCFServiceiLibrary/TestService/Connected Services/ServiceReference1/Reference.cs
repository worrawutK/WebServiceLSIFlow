//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestService.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineOnline", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum MachineOnline : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineOnlineStateResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class MachineOnlineStateResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineProcessingState", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum MachineProcessingState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Initial = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Idle = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Setup = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ready = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Execute = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pause = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotSetUp = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Maintenance = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateMachineStateResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class UpdateMachineStateResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SetupLotResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class SetupLotResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.ServiceReference1.SetupLotResult.Status IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.ServiceReference1.SetupLotResult.LotEnum LotTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecipeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorNo {
            get {
                return this.ErrorNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorNoField, value) != true)) {
                    this.ErrorNoField = value;
                    this.RaisePropertyChanged("ErrorNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.ServiceReference1.SetupLotResult.Status IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.ServiceReference1.SetupLotResult.LotEnum LotType {
            get {
                return this.LotTypeField;
            }
            set {
                if ((this.LotTypeField.Equals(value) != true)) {
                    this.LotTypeField = value;
                    this.RaisePropertyChanged("LotType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Recipe {
            get {
                return this.RecipeField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipeField, value) != true)) {
                    this.RecipeField = value;
                    this.RaisePropertyChanged("Recipe");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="SetupLotResult.Status", Namespace="http://schemas.datacontract.org/2004/07/")]
        public enum Status : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Pass = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            NotPass = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Warning = 2,
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="SetupLotResult.LotEnum", Namespace="http://schemas.datacontract.org/2004/07/")]
        public enum LotEnum : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            TDC = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            ApcsPro = 1,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartLotResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class StartLotResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Judge", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum Judge : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NG = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateFirstinspectionResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class UpdateFirstinspectionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndLotResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class EndLotResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateFinalinspectionResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class UpdateFinalinspectionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmState", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum AlarmState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RESET = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SET = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineAlarmResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class MachineAlarmResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CancelLotResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CancelLotResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReinputResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ReinputResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CheckLotApcsProResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CheckLotApcsProResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OnlineStartResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class OnlineStartResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OnlineEndResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class OnlineEndResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceiLibrary")]
    public interface IServiceiLibrary {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/MachineOnlineState", ReplyAction="http://tempuri.org/IServiceiLibrary/MachineOnlineStateResponse")]
        TestService.ServiceReference1.MachineOnlineStateResult MachineOnlineState(string mcNo, TestService.ServiceReference1.MachineOnline online);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/UpdateMachineState", ReplyAction="http://tempuri.org/IServiceiLibrary/UpdateMachineStateResponse")]
        TestService.ServiceReference1.UpdateMachineStateResult UpdateMachineState(string mcNo, TestService.ServiceReference1.MachineProcessingState state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/SetupLot", ReplyAction="http://tempuri.org/IServiceiLibrary/SetupLotResponse")]
        TestService.ServiceReference1.SetupLotResult SetupLot(string lotNo, string mcNo, string opNo, string processName, string layerNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/SetupLotNoCheckLicenser", ReplyAction="http://tempuri.org/IServiceiLibrary/SetupLotNoCheckLicenserResponse")]
        TestService.ServiceReference1.SetupLotResult SetupLotNoCheckLicenser(string lotNo, string mcNo, string opNo, string processName, string layerNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/StartLot", ReplyAction="http://tempuri.org/IServiceiLibrary/StartLotResponse")]
        TestService.ServiceReference1.StartLotResult StartLot(string lotNo, string mcNo, string opNo, string recipe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/UpdateFirstinspection", ReplyAction="http://tempuri.org/IServiceiLibrary/UpdateFirstinspectionResponse")]
        TestService.ServiceReference1.UpdateFirstinspectionResult UpdateFirstinspection(string lotNo, string opNo, TestService.ServiceReference1.Judge judge, string mcNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/EndLot", ReplyAction="http://tempuri.org/IServiceiLibrary/EndLotResponse")]
        TestService.ServiceReference1.EndLotResult EndLot(string lotNo, string mcNo, string opNo, int good, int ng);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/EndLotNoCheckLicenser", ReplyAction="http://tempuri.org/IServiceiLibrary/EndLotNoCheckLicenserResponse")]
        TestService.ServiceReference1.EndLotResult EndLotNoCheckLicenser(string lotNo, string mcNo, string opNo, int good, int ng);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/UpdateFinalinspection", ReplyAction="http://tempuri.org/IServiceiLibrary/UpdateFinalinspectionResponse")]
        TestService.ServiceReference1.UpdateFinalinspectionResult UpdateFinalinspection(string lotNo, string opNo, TestService.ServiceReference1.Judge judge, string mcNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/MachineAlarm", ReplyAction="http://tempuri.org/IServiceiLibrary/MachineAlarmResponse")]
        TestService.ServiceReference1.MachineAlarmResult MachineAlarm(string lotNo, string mcNo, string opNo, string AlarmNo, TestService.ServiceReference1.AlarmState alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/CancelLot", ReplyAction="http://tempuri.org/IServiceiLibrary/CancelLotResponse")]
        TestService.ServiceReference1.CancelLotResult CancelLot(string mcNo, string lotNo, string opNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/Reinput", ReplyAction="http://tempuri.org/IServiceiLibrary/ReinputResponse")]
        TestService.ServiceReference1.ReinputResult Reinput(string lotNo, string mcNo, string opNo, int good, int ng);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/ReinputAndHoldLot", ReplyAction="http://tempuri.org/IServiceiLibrary/ReinputAndHoldLotResponse")]
        TestService.ServiceReference1.ReinputResult ReinputAndHoldLot(string lotNo, string mcNo, string opNo, int good, int ng);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/CheckLotApcsProManual", ReplyAction="http://tempuri.org/IServiceiLibrary/CheckLotApcsProManualResponse")]
        TestService.ServiceReference1.CheckLotApcsProResult CheckLotApcsProManual(string lotNo, string mcNo, string package);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/OnlineStart", ReplyAction="http://tempuri.org/IServiceiLibrary/OnlineStartResponse")]
        TestService.ServiceReference1.OnlineStartResult OnlineStart(string lotNo, string mcNo, string opNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/OnlineEnd", ReplyAction="http://tempuri.org/IServiceiLibrary/OnlineEndResponse")]
        TestService.ServiceReference1.OnlineEndResult OnlineEnd(string lotNo, string mcNo, string opNo, int good, int ng);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceiLibraryChannel : TestService.ServiceReference1.IServiceiLibrary, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceiLibraryClient : System.ServiceModel.ClientBase<TestService.ServiceReference1.IServiceiLibrary>, TestService.ServiceReference1.IServiceiLibrary {
        
        public ServiceiLibraryClient() {
        }
        
        public ServiceiLibraryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceiLibraryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceiLibraryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceiLibraryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestService.ServiceReference1.MachineOnlineStateResult MachineOnlineState(string mcNo, TestService.ServiceReference1.MachineOnline online) {
            return base.Channel.MachineOnlineState(mcNo, online);
        }
        
        public TestService.ServiceReference1.UpdateMachineStateResult UpdateMachineState(string mcNo, TestService.ServiceReference1.MachineProcessingState state) {
            return base.Channel.UpdateMachineState(mcNo, state);
        }
        
        public TestService.ServiceReference1.SetupLotResult SetupLot(string lotNo, string mcNo, string opNo, string processName, string layerNo) {
            return base.Channel.SetupLot(lotNo, mcNo, opNo, processName, layerNo);
        }
        
        public TestService.ServiceReference1.SetupLotResult SetupLotNoCheckLicenser(string lotNo, string mcNo, string opNo, string processName, string layerNo) {
            return base.Channel.SetupLotNoCheckLicenser(lotNo, mcNo, opNo, processName, layerNo);
        }
        
        public TestService.ServiceReference1.StartLotResult StartLot(string lotNo, string mcNo, string opNo, string recipe) {
            return base.Channel.StartLot(lotNo, mcNo, opNo, recipe);
        }
        
        public TestService.ServiceReference1.UpdateFirstinspectionResult UpdateFirstinspection(string lotNo, string opNo, TestService.ServiceReference1.Judge judge, string mcNo) {
            return base.Channel.UpdateFirstinspection(lotNo, opNo, judge, mcNo);
        }
        
        public TestService.ServiceReference1.EndLotResult EndLot(string lotNo, string mcNo, string opNo, int good, int ng) {
            return base.Channel.EndLot(lotNo, mcNo, opNo, good, ng);
        }
        
        public TestService.ServiceReference1.EndLotResult EndLotNoCheckLicenser(string lotNo, string mcNo, string opNo, int good, int ng) {
            return base.Channel.EndLotNoCheckLicenser(lotNo, mcNo, opNo, good, ng);
        }
        
        public TestService.ServiceReference1.UpdateFinalinspectionResult UpdateFinalinspection(string lotNo, string opNo, TestService.ServiceReference1.Judge judge, string mcNo) {
            return base.Channel.UpdateFinalinspection(lotNo, opNo, judge, mcNo);
        }
        
        public TestService.ServiceReference1.MachineAlarmResult MachineAlarm(string lotNo, string mcNo, string opNo, string AlarmNo, TestService.ServiceReference1.AlarmState alarm) {
            return base.Channel.MachineAlarm(lotNo, mcNo, opNo, AlarmNo, alarm);
        }
        
        public TestService.ServiceReference1.CancelLotResult CancelLot(string mcNo, string lotNo, string opNo) {
            return base.Channel.CancelLot(mcNo, lotNo, opNo);
        }
        
        public TestService.ServiceReference1.ReinputResult Reinput(string lotNo, string mcNo, string opNo, int good, int ng) {
            return base.Channel.Reinput(lotNo, mcNo, opNo, good, ng);
        }
        
        public TestService.ServiceReference1.ReinputResult ReinputAndHoldLot(string lotNo, string mcNo, string opNo, int good, int ng) {
            return base.Channel.ReinputAndHoldLot(lotNo, mcNo, opNo, good, ng);
        }
        
        public TestService.ServiceReference1.CheckLotApcsProResult CheckLotApcsProManual(string lotNo, string mcNo, string package) {
            return base.Channel.CheckLotApcsProManual(lotNo, mcNo, package);
        }
        
        public TestService.ServiceReference1.OnlineStartResult OnlineStart(string lotNo, string mcNo, string opNo) {
            return base.Channel.OnlineStart(lotNo, mcNo, opNo);
        }
        
        public TestService.ServiceReference1.OnlineEndResult OnlineEnd(string lotNo, string mcNo, string opNo, int good, int ng) {
            return base.Channel.OnlineEnd(lotNo, mcNo, opNo, good, ng);
        }
    }
}
