//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestService.iLibraryService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineOnline", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum MachineOnline : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineOnlineStateResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class MachineOnlineStateResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageType", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum MessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Apcs = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ApcsPro = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineProcessingState", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum MachineProcessingState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Initial = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Idle = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Setup = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ready = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Execute = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pause = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LotSetUp = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Maintenance = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateMachineStateResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class UpdateMachineStateResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SetupLotResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class SetupLotResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GoodQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.SetupLotResult.Status IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NgQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecipeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorNo {
            get {
                return this.ErrorNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorNoField, value) != true)) {
                    this.ErrorNoField = value;
                    this.RaisePropertyChanged("ErrorNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GoodQty {
            get {
                return this.GoodQtyField;
            }
            set {
                if ((this.GoodQtyField.Equals(value) != true)) {
                    this.GoodQtyField = value;
                    this.RaisePropertyChanged("GoodQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.SetupLotResult.Status IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NgQty {
            get {
                return this.NgQtyField;
            }
            set {
                if ((this.NgQtyField.Equals(value) != true)) {
                    this.NgQtyField = value;
                    this.RaisePropertyChanged("NgQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Recipe {
            get {
                return this.RecipeField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipeField, value) != true)) {
                    this.RecipeField = value;
                    this.RaisePropertyChanged("Recipe");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="SetupLotResult.Status", Namespace="http://schemas.datacontract.org/2004/07/")]
        public enum Status : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Pass = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            NotPass = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Warning = 2,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RunMode", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum RunMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Separated = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SeparatedEnd = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReRun = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartLotResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class StartLotResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OnlineStartResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class OnlineStartResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OnlineEndResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class OnlineEndResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Judge", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum Judge : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NG = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateFirstinspectionResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class UpdateFirstinspectionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndLotResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class EndLotResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextFlowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextFlow {
            get {
                return this.NextFlowField;
            }
            set {
                if ((object.ReferenceEquals(this.NextFlowField, value) != true)) {
                    this.NextFlowField = value;
                    this.RaisePropertyChanged("NextFlow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateFinalinspectionResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class UpdateFinalinspectionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmState", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum AlarmState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RESET = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SET = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineAlarmResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class MachineAlarmResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CancelLotResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CancelLotResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndMode", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum EndMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AbnormalEndReset = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AbnormalEndAccumulate = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReinputResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ReinputResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CheckLotApcsProResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CheckLotApcsProResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.MessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cause {
            get {
                return this.CauseField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseField, value) != true)) {
                    this.CauseField = value;
                    this.RaisePropertyChanged("Cause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionName {
            get {
                return this.FunctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionNameField, value) != true)) {
                    this.FunctionNameField = value;
                    this.RaisePropertyChanged("FunctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubFunction {
            get {
                return this.SubFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.SubFunctionField, value) != true)) {
                    this.SubFunctionField = value;
                    this.RaisePropertyChanged("SubFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.MessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="iReportResponse", Namespace="http://tempuri.org/")]
    [System.SerializableAttribute()]
    public partial class iReportResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        private bool HasErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MCNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=1)]
        public bool HasError {
            get {
                return this.HasErrorField;
            }
            set {
                if ((this.HasErrorField.Equals(value) != true)) {
                    this.HasErrorField = value;
                    this.RaisePropertyChanged("HasError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string MCNo {
            get {
                return this.MCNoField;
            }
            set {
                if ((object.ReferenceEquals(this.MCNoField, value) != true)) {
                    this.MCNoField = value;
                    this.RaisePropertyChanged("MCNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CarrierInfo", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CarrierInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentCarrierNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.CarrierInfo.CarrierStatus EnabledControlCarrierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.CarrierInfo.CarrierStatus InControlCarrierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.CarrierInfo.CarrierStatus LoadCarrierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoadCarrierNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextCarrierNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.CarrierInfo.CarrierStatus RegisterCarrierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegisterCarrierNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.CarrierInfo.CarrierStatus TransferCarrierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransferCarrierNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.CarrierInfo.CarrierStatus UnloadCarrierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnloadCarrierNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentCarrierNo {
            get {
                return this.CurrentCarrierNoField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentCarrierNoField, value) != true)) {
                    this.CurrentCarrierNoField = value;
                    this.RaisePropertyChanged("CurrentCarrierNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.CarrierInfo.CarrierStatus EnabledControlCarrier {
            get {
                return this.EnabledControlCarrierField;
            }
            set {
                if ((this.EnabledControlCarrierField.Equals(value) != true)) {
                    this.EnabledControlCarrierField = value;
                    this.RaisePropertyChanged("EnabledControlCarrier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.CarrierInfo.CarrierStatus InControlCarrier {
            get {
                return this.InControlCarrierField;
            }
            set {
                if ((this.InControlCarrierField.Equals(value) != true)) {
                    this.InControlCarrierField = value;
                    this.RaisePropertyChanged("InControlCarrier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.CarrierInfo.CarrierStatus LoadCarrier {
            get {
                return this.LoadCarrierField;
            }
            set {
                if ((this.LoadCarrierField.Equals(value) != true)) {
                    this.LoadCarrierField = value;
                    this.RaisePropertyChanged("LoadCarrier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoadCarrierNo {
            get {
                return this.LoadCarrierNoField;
            }
            set {
                if ((object.ReferenceEquals(this.LoadCarrierNoField, value) != true)) {
                    this.LoadCarrierNoField = value;
                    this.RaisePropertyChanged("LoadCarrierNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextCarrierNo {
            get {
                return this.NextCarrierNoField;
            }
            set {
                if ((object.ReferenceEquals(this.NextCarrierNoField, value) != true)) {
                    this.NextCarrierNoField = value;
                    this.RaisePropertyChanged("NextCarrierNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.CarrierInfo.CarrierStatus RegisterCarrier {
            get {
                return this.RegisterCarrierField;
            }
            set {
                if ((this.RegisterCarrierField.Equals(value) != true)) {
                    this.RegisterCarrierField = value;
                    this.RaisePropertyChanged("RegisterCarrier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegisterCarrierNo {
            get {
                return this.RegisterCarrierNoField;
            }
            set {
                if ((object.ReferenceEquals(this.RegisterCarrierNoField, value) != true)) {
                    this.RegisterCarrierNoField = value;
                    this.RaisePropertyChanged("RegisterCarrierNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.CarrierInfo.CarrierStatus TransferCarrier {
            get {
                return this.TransferCarrierField;
            }
            set {
                if ((this.TransferCarrierField.Equals(value) != true)) {
                    this.TransferCarrierField = value;
                    this.RaisePropertyChanged("TransferCarrier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransferCarrierNo {
            get {
                return this.TransferCarrierNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TransferCarrierNoField, value) != true)) {
                    this.TransferCarrierNoField = value;
                    this.RaisePropertyChanged("TransferCarrierNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.CarrierInfo.CarrierStatus UnloadCarrier {
            get {
                return this.UnloadCarrierField;
            }
            set {
                if ((this.UnloadCarrierField.Equals(value) != true)) {
                    this.UnloadCarrierField = value;
                    this.RaisePropertyChanged("UnloadCarrier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnloadCarrierNo {
            get {
                return this.UnloadCarrierNoField;
            }
            set {
                if ((object.ReferenceEquals(this.UnloadCarrierNoField, value) != true)) {
                    this.UnloadCarrierNoField = value;
                    this.RaisePropertyChanged("UnloadCarrierNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="CarrierInfo.CarrierStatus", Namespace="http://schemas.datacontract.org/2004/07/")]
        public enum CarrierStatus : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            No_Use = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Use = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Use_OnLotEnd = 2,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Licenser", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum Licenser : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoCheck = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Check = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SetupLotSpecialParametersEventArgs", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class SetupLotSpecialParametersEventArgs : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FrameInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LayerNoApcsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string McNoOvenApcsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.RunMode RunModeApcsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FrameIn {
            get {
                return this.FrameInField;
            }
            set {
                if ((this.FrameInField.Equals(value) != true)) {
                    this.FrameInField = value;
                    this.RaisePropertyChanged("FrameIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LayerNoApcs {
            get {
                return this.LayerNoApcsField;
            }
            set {
                if ((object.ReferenceEquals(this.LayerNoApcsField, value) != true)) {
                    this.LayerNoApcsField = value;
                    this.RaisePropertyChanged("LayerNoApcs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string McNoOvenApcs {
            get {
                return this.McNoOvenApcsField;
            }
            set {
                if ((object.ReferenceEquals(this.McNoOvenApcsField, value) != true)) {
                    this.McNoOvenApcsField = value;
                    this.RaisePropertyChanged("McNoOvenApcs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.RunMode RunModeApcs {
            get {
                return this.RunModeApcsField;
            }
            set {
                if ((this.RunModeApcsField.Equals(value) != true)) {
                    this.RunModeApcsField = value;
                    this.RaisePropertyChanged("RunModeApcs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartLotSpecialParametersEventArgs", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class StartLotSpecialParametersEventArgs : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string McNoOvenApcsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.RunMode RunModeApcsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string McNoOvenApcs {
            get {
                return this.McNoOvenApcsField;
            }
            set {
                if ((object.ReferenceEquals(this.McNoOvenApcsField, value) != true)) {
                    this.McNoOvenApcsField = value;
                    this.RaisePropertyChanged("McNoOvenApcs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.RunMode RunModeApcs {
            get {
                return this.RunModeApcsField;
            }
            set {
                if ((this.RunModeApcsField.Equals(value) != true)) {
                    this.RunModeApcsField = value;
                    this.RaisePropertyChanged("RunModeApcs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndLotSpecialParametersEventArgs", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class EndLotSpecialParametersEventArgs : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string McNoOvenApcsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string McNoOvenApcs {
            get {
                return this.McNoOvenApcsField;
            }
            set {
                if ((object.ReferenceEquals(this.McNoOvenApcsField, value) != true)) {
                    this.McNoOvenApcsField = value;
                    this.RaisePropertyChanged("McNoOvenApcs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LotInformation", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class LotInformation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FailQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LotIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestService.iLibraryService.LotInformation.LotTypeState LotTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PassQtyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FailQty {
            get {
                return this.FailQtyField;
            }
            set {
                if ((this.FailQtyField.Equals(value) != true)) {
                    this.FailQtyField = value;
                    this.RaisePropertyChanged("FailQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobName {
            get {
                return this.JobNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNameField, value) != true)) {
                    this.JobNameField = value;
                    this.RaisePropertyChanged("JobName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LotId {
            get {
                return this.LotIdField;
            }
            set {
                if ((this.LotIdField.Equals(value) != true)) {
                    this.LotIdField = value;
                    this.RaisePropertyChanged("LotId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LotNo {
            get {
                return this.LotNoField;
            }
            set {
                if ((object.ReferenceEquals(this.LotNoField, value) != true)) {
                    this.LotNoField = value;
                    this.RaisePropertyChanged("LotNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestService.iLibraryService.LotInformation.LotTypeState LotType {
            get {
                return this.LotTypeField;
            }
            set {
                if ((this.LotTypeField.Equals(value) != true)) {
                    this.LotTypeField = value;
                    this.RaisePropertyChanged("LotType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageName {
            get {
                return this.PackageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageNameField, value) != true)) {
                    this.PackageNameField = value;
                    this.RaisePropertyChanged("PackageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PassQty {
            get {
                return this.PassQtyField;
            }
            set {
                if ((this.PassQtyField.Equals(value) != true)) {
                    this.PassQtyField = value;
                    this.RaisePropertyChanged("PassQty");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="LotInformation.LotTypeState", Namespace="http://schemas.datacontract.org/2004/07/")]
        public enum LotTypeState : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Apcs = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            ApcsPro = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Unknown = 2,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="iLibraryService.IServiceiLibrary")]
    public interface IServiceiLibrary {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/MachineOnlineState", ReplyAction="http://tempuri.org/IServiceiLibrary/MachineOnlineStateResponse")]
        TestService.iLibraryService.MachineOnlineStateResult MachineOnlineState(string mcNo, TestService.iLibraryService.MachineOnline online);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/UpdateMachineState", ReplyAction="http://tempuri.org/IServiceiLibrary/UpdateMachineStateResponse")]
        TestService.iLibraryService.UpdateMachineStateResult UpdateMachineState(string mcNo, TestService.iLibraryService.MachineProcessingState state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/SetupLot", ReplyAction="http://tempuri.org/IServiceiLibrary/SetupLotResponse")]
        TestService.iLibraryService.SetupLotResult SetupLot(string lotNo, string mcNo, string opNo, string processName, string layerNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/SetupLotNoCheckLicenser", ReplyAction="http://tempuri.org/IServiceiLibrary/SetupLotNoCheckLicenserResponse")]
        TestService.iLibraryService.SetupLotResult SetupLotNoCheckLicenser(string lotNo, string mcNo, string opNo, string processName, string layerNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/SetupLotCustomMode", ReplyAction="http://tempuri.org/IServiceiLibrary/SetupLotCustomModeResponse")]
        TestService.iLibraryService.SetupLotResult SetupLotCustomMode(string lotNo, string mcNo, string opNo, string processName, string layerNo, TestService.iLibraryService.RunMode runMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/SetupLotCustomModeNoCheckLicenser", ReplyAction="http://tempuri.org/IServiceiLibrary/SetupLotCustomModeNoCheckLicenserResponse")]
        TestService.iLibraryService.SetupLotResult SetupLotCustomModeNoCheckLicenser(string lotNo, string mcNo, string opNo, string processName, string layerNo, TestService.iLibraryService.RunMode runMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/SetupLotOven", ReplyAction="http://tempuri.org/IServiceiLibrary/SetupLotOvenResponse")]
        TestService.iLibraryService.SetupLotResult SetupLotOven(string lotNo, string mcNoApcsPro, string mcNoApcs, string opNo, string processName, string layerNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/StartLot", ReplyAction="http://tempuri.org/IServiceiLibrary/StartLotResponse")]
        TestService.iLibraryService.StartLotResult StartLot(string lotNo, string mcNo, string opNo, string recipe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/StartLotCustomMode", ReplyAction="http://tempuri.org/IServiceiLibrary/StartLotCustomModeResponse")]
        TestService.iLibraryService.StartLotResult StartLotCustomMode(string lotNo, string mcNo, string opNo, string recipe, TestService.iLibraryService.RunMode runMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/StartLotOven", ReplyAction="http://tempuri.org/IServiceiLibrary/StartLotOvenResponse")]
        TestService.iLibraryService.StartLotResult StartLotOven(string lotNo, string mcNoApcsPro, string mcNoApcs, string opNo, string recipe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/OnlineStart", ReplyAction="http://tempuri.org/IServiceiLibrary/OnlineStartResponse")]
        TestService.iLibraryService.OnlineStartResult OnlineStart(string lotNo, string mcNo, string opNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/OnlineEnd", ReplyAction="http://tempuri.org/IServiceiLibrary/OnlineEndResponse")]
        TestService.iLibraryService.OnlineEndResult OnlineEnd(string lotNo, string mcNo, string opNo, int good, int ng);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/UpdateFirstinspection", ReplyAction="http://tempuri.org/IServiceiLibrary/UpdateFirstinspectionResponse")]
        TestService.iLibraryService.UpdateFirstinspectionResult UpdateFirstinspection(string lotNo, string opNo, TestService.iLibraryService.Judge judge, string mcNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/EndLot", ReplyAction="http://tempuri.org/IServiceiLibrary/EndLotResponse")]
        TestService.iLibraryService.EndLotResult EndLot(string lotNo, string mcNo, string opNo, int good, int ng);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/EndLotNoCheckLicenser", ReplyAction="http://tempuri.org/IServiceiLibrary/EndLotNoCheckLicenserResponse")]
        TestService.iLibraryService.EndLotResult EndLotNoCheckLicenser(string lotNo, string mcNo, string opNo, int good, int ng);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/EndLotOven", ReplyAction="http://tempuri.org/IServiceiLibrary/EndLotOvenResponse")]
        TestService.iLibraryService.EndLotResult EndLotOven(string lotNo, string mcNoApcs, string mcNoApcsPro, string opNo, int good, int ng);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/UpdateFinalinspection", ReplyAction="http://tempuri.org/IServiceiLibrary/UpdateFinalinspectionResponse")]
        TestService.iLibraryService.UpdateFinalinspectionResult UpdateFinalinspection(string lotNo, string opNo, TestService.iLibraryService.Judge judge, string mcNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/MachineAlarm", ReplyAction="http://tempuri.org/IServiceiLibrary/MachineAlarmResponse")]
        TestService.iLibraryService.MachineAlarmResult MachineAlarm(string lotNo, string mcNo, string opNo, string AlarmNo, TestService.iLibraryService.AlarmState alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/CancelLot", ReplyAction="http://tempuri.org/IServiceiLibrary/CancelLotResponse")]
        TestService.iLibraryService.CancelLotResult CancelLot(string mcNo, string lotNo, string opNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/Reinput", ReplyAction="http://tempuri.org/IServiceiLibrary/ReinputResponse")]
        TestService.iLibraryService.ReinputResult Reinput(string lotNo, string mcNo, string opNo, int good, int ng, TestService.iLibraryService.EndMode endMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/ReinputAndHoldLot", ReplyAction="http://tempuri.org/IServiceiLibrary/ReinputAndHoldLotResponse")]
        TestService.iLibraryService.ReinputResult ReinputAndHoldLot(string lotNo, string mcNo, string opNo, int good, int ng, TestService.iLibraryService.EndMode endMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/ReinputOven", ReplyAction="http://tempuri.org/IServiceiLibrary/ReinputOvenResponse")]
        TestService.iLibraryService.ReinputResult ReinputOven(string lotNo, string mcNoApcsPro, string mcNoApcs, string opNo, int good, int ng, TestService.iLibraryService.EndMode endMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/CheckLotApcsProManual", ReplyAction="http://tempuri.org/IServiceiLibrary/CheckLotApcsProManualResponse")]
        TestService.iLibraryService.CheckLotApcsProResult CheckLotApcsProManual(string lotNo, string mcNo, string package);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/IRePortCheck", ReplyAction="http://tempuri.org/IServiceiLibrary/IRePortCheckResponse")]
        TestService.iLibraryService.iReportResponse IRePortCheck(string mcNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/GetCarrierInfo", ReplyAction="http://tempuri.org/IServiceiLibrary/GetCarrierInfoResponse")]
        TestService.iLibraryService.CarrierInfo GetCarrierInfo(string mcNo, string lotNo, string opNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/SetupLotPhase2", ReplyAction="http://tempuri.org/IServiceiLibrary/SetupLotPhase2Response")]
        TestService.iLibraryService.SetupLotResult SetupLotPhase2(string lotNo, string mcNo, string opNo, string processName, TestService.iLibraryService.Licenser licenser, TestService.iLibraryService.CarrierInfo carrierInfo, TestService.iLibraryService.SetupLotSpecialParametersEventArgs specialParametersEventArgs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/StartLotPhase2", ReplyAction="http://tempuri.org/IServiceiLibrary/StartLotPhase2Response")]
        TestService.iLibraryService.StartLotResult StartLotPhase2(string lotNo, string mcNo, string opNo, string recipe, TestService.iLibraryService.CarrierInfo carrierInfo, TestService.iLibraryService.StartLotSpecialParametersEventArgs specialParametersEventArgs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/EndLotPhase2", ReplyAction="http://tempuri.org/IServiceiLibrary/EndLotPhase2Response")]
        TestService.iLibraryService.EndLotResult EndLotPhase2(string lotNo, string mcNo, string opNo, int good, int ng, TestService.iLibraryService.Licenser licenser, TestService.iLibraryService.CarrierInfo carrierInfo, TestService.iLibraryService.EndLotSpecialParametersEventArgs specialParametersEventArgs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/GetLotInfo", ReplyAction="http://tempuri.org/IServiceiLibrary/GetLotInfoResponse")]
        TestService.iLibraryService.LotInformation GetLotInfo(string lotNo, string mcNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceiLibrary/CheckPackageOnlyApcsPro", ReplyAction="http://tempuri.org/IServiceiLibrary/CheckPackageOnlyApcsProResponse")]
        bool CheckPackageOnlyApcsPro(string mcNo, string package, string opNo, string lotNo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceiLibraryChannel : TestService.iLibraryService.IServiceiLibrary, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceiLibraryClient : System.ServiceModel.ClientBase<TestService.iLibraryService.IServiceiLibrary>, TestService.iLibraryService.IServiceiLibrary {
        
        public ServiceiLibraryClient() {
        }
        
        public ServiceiLibraryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceiLibraryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceiLibraryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceiLibraryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestService.iLibraryService.MachineOnlineStateResult MachineOnlineState(string mcNo, TestService.iLibraryService.MachineOnline online) {
            return base.Channel.MachineOnlineState(mcNo, online);
        }
        
        public TestService.iLibraryService.UpdateMachineStateResult UpdateMachineState(string mcNo, TestService.iLibraryService.MachineProcessingState state) {
            return base.Channel.UpdateMachineState(mcNo, state);
        }
        
        public TestService.iLibraryService.SetupLotResult SetupLot(string lotNo, string mcNo, string opNo, string processName, string layerNo) {
            return base.Channel.SetupLot(lotNo, mcNo, opNo, processName, layerNo);
        }
        
        public TestService.iLibraryService.SetupLotResult SetupLotNoCheckLicenser(string lotNo, string mcNo, string opNo, string processName, string layerNo) {
            return base.Channel.SetupLotNoCheckLicenser(lotNo, mcNo, opNo, processName, layerNo);
        }
        
        public TestService.iLibraryService.SetupLotResult SetupLotCustomMode(string lotNo, string mcNo, string opNo, string processName, string layerNo, TestService.iLibraryService.RunMode runMode) {
            return base.Channel.SetupLotCustomMode(lotNo, mcNo, opNo, processName, layerNo, runMode);
        }
        
        public TestService.iLibraryService.SetupLotResult SetupLotCustomModeNoCheckLicenser(string lotNo, string mcNo, string opNo, string processName, string layerNo, TestService.iLibraryService.RunMode runMode) {
            return base.Channel.SetupLotCustomModeNoCheckLicenser(lotNo, mcNo, opNo, processName, layerNo, runMode);
        }
        
        public TestService.iLibraryService.SetupLotResult SetupLotOven(string lotNo, string mcNoApcsPro, string mcNoApcs, string opNo, string processName, string layerNo) {
            return base.Channel.SetupLotOven(lotNo, mcNoApcsPro, mcNoApcs, opNo, processName, layerNo);
        }
        
        public TestService.iLibraryService.StartLotResult StartLot(string lotNo, string mcNo, string opNo, string recipe) {
            return base.Channel.StartLot(lotNo, mcNo, opNo, recipe);
        }
        
        public TestService.iLibraryService.StartLotResult StartLotCustomMode(string lotNo, string mcNo, string opNo, string recipe, TestService.iLibraryService.RunMode runMode) {
            return base.Channel.StartLotCustomMode(lotNo, mcNo, opNo, recipe, runMode);
        }
        
        public TestService.iLibraryService.StartLotResult StartLotOven(string lotNo, string mcNoApcsPro, string mcNoApcs, string opNo, string recipe) {
            return base.Channel.StartLotOven(lotNo, mcNoApcsPro, mcNoApcs, opNo, recipe);
        }
        
        public TestService.iLibraryService.OnlineStartResult OnlineStart(string lotNo, string mcNo, string opNo) {
            return base.Channel.OnlineStart(lotNo, mcNo, opNo);
        }
        
        public TestService.iLibraryService.OnlineEndResult OnlineEnd(string lotNo, string mcNo, string opNo, int good, int ng) {
            return base.Channel.OnlineEnd(lotNo, mcNo, opNo, good, ng);
        }
        
        public TestService.iLibraryService.UpdateFirstinspectionResult UpdateFirstinspection(string lotNo, string opNo, TestService.iLibraryService.Judge judge, string mcNo) {
            return base.Channel.UpdateFirstinspection(lotNo, opNo, judge, mcNo);
        }
        
        public TestService.iLibraryService.EndLotResult EndLot(string lotNo, string mcNo, string opNo, int good, int ng) {
            return base.Channel.EndLot(lotNo, mcNo, opNo, good, ng);
        }
        
        public TestService.iLibraryService.EndLotResult EndLotNoCheckLicenser(string lotNo, string mcNo, string opNo, int good, int ng) {
            return base.Channel.EndLotNoCheckLicenser(lotNo, mcNo, opNo, good, ng);
        }
        
        public TestService.iLibraryService.EndLotResult EndLotOven(string lotNo, string mcNoApcs, string mcNoApcsPro, string opNo, int good, int ng) {
            return base.Channel.EndLotOven(lotNo, mcNoApcs, mcNoApcsPro, opNo, good, ng);
        }
        
        public TestService.iLibraryService.UpdateFinalinspectionResult UpdateFinalinspection(string lotNo, string opNo, TestService.iLibraryService.Judge judge, string mcNo) {
            return base.Channel.UpdateFinalinspection(lotNo, opNo, judge, mcNo);
        }
        
        public TestService.iLibraryService.MachineAlarmResult MachineAlarm(string lotNo, string mcNo, string opNo, string AlarmNo, TestService.iLibraryService.AlarmState alarm) {
            return base.Channel.MachineAlarm(lotNo, mcNo, opNo, AlarmNo, alarm);
        }
        
        public TestService.iLibraryService.CancelLotResult CancelLot(string mcNo, string lotNo, string opNo) {
            return base.Channel.CancelLot(mcNo, lotNo, opNo);
        }
        
        public TestService.iLibraryService.ReinputResult Reinput(string lotNo, string mcNo, string opNo, int good, int ng, TestService.iLibraryService.EndMode endMode) {
            return base.Channel.Reinput(lotNo, mcNo, opNo, good, ng, endMode);
        }
        
        public TestService.iLibraryService.ReinputResult ReinputAndHoldLot(string lotNo, string mcNo, string opNo, int good, int ng, TestService.iLibraryService.EndMode endMode) {
            return base.Channel.ReinputAndHoldLot(lotNo, mcNo, opNo, good, ng, endMode);
        }
        
        public TestService.iLibraryService.ReinputResult ReinputOven(string lotNo, string mcNoApcsPro, string mcNoApcs, string opNo, int good, int ng, TestService.iLibraryService.EndMode endMode) {
            return base.Channel.ReinputOven(lotNo, mcNoApcsPro, mcNoApcs, opNo, good, ng, endMode);
        }
        
        public TestService.iLibraryService.CheckLotApcsProResult CheckLotApcsProManual(string lotNo, string mcNo, string package) {
            return base.Channel.CheckLotApcsProManual(lotNo, mcNo, package);
        }
        
        public TestService.iLibraryService.iReportResponse IRePortCheck(string mcNo) {
            return base.Channel.IRePortCheck(mcNo);
        }
        
        public TestService.iLibraryService.CarrierInfo GetCarrierInfo(string mcNo, string lotNo, string opNo) {
            return base.Channel.GetCarrierInfo(mcNo, lotNo, opNo);
        }
        
        public TestService.iLibraryService.SetupLotResult SetupLotPhase2(string lotNo, string mcNo, string opNo, string processName, TestService.iLibraryService.Licenser licenser, TestService.iLibraryService.CarrierInfo carrierInfo, TestService.iLibraryService.SetupLotSpecialParametersEventArgs specialParametersEventArgs) {
            return base.Channel.SetupLotPhase2(lotNo, mcNo, opNo, processName, licenser, carrierInfo, specialParametersEventArgs);
        }
        
        public TestService.iLibraryService.StartLotResult StartLotPhase2(string lotNo, string mcNo, string opNo, string recipe, TestService.iLibraryService.CarrierInfo carrierInfo, TestService.iLibraryService.StartLotSpecialParametersEventArgs specialParametersEventArgs) {
            return base.Channel.StartLotPhase2(lotNo, mcNo, opNo, recipe, carrierInfo, specialParametersEventArgs);
        }
        
        public TestService.iLibraryService.EndLotResult EndLotPhase2(string lotNo, string mcNo, string opNo, int good, int ng, TestService.iLibraryService.Licenser licenser, TestService.iLibraryService.CarrierInfo carrierInfo, TestService.iLibraryService.EndLotSpecialParametersEventArgs specialParametersEventArgs) {
            return base.Channel.EndLotPhase2(lotNo, mcNo, opNo, good, ng, licenser, carrierInfo, specialParametersEventArgs);
        }
        
        public TestService.iLibraryService.LotInformation GetLotInfo(string lotNo, string mcNo) {
            return base.Channel.GetLotInfo(lotNo, mcNo);
        }
        
        public bool CheckPackageOnlyApcsPro(string mcNo, string package, string opNo, string lotNo) {
            return base.Channel.CheckPackageOnlyApcsPro(mcNo, package, opNo, lotNo);
        }
    }
}
